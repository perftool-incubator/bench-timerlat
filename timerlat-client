#!/bin/bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
exec >timerlat-client-stderrout.txt
exec 2>&1

. /usr/bin/timerlat-base || (echo "/usr/bin/timerlat-base not found"; exit 1)

dump_runtime
validate_label
validate_sw_prereqs

no_load_balance=0
priority=""
duration=60
smt="on"
period=1000000
house_keeping=${HK_CPUS}
warm_up=""
thread=""
dma_latency=""

opts=$(getopt -q -o "" --longoptions "cpus:,house-keeping:,priority:,no-load-balance:,duration:,smt:,period:,warm-up:,thread:,dma-latency:,deepest-idle-state:" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
    printf -- "\tUnrecognized option specified\n\n"
    exit 1
fi
eval set -- "$opts";
while true; do
    case "$1" in
        --cpus)
            shift;
            cpus=$1
            shift;
            ;;
        --house-keeping)
            shift;
            house_keeping=$1
            shift;
            ;;
        --priority)
            shift;
            priority="--priority $1"
            shift;
            ;;
        --duration)
            shift;
            duration=$1
            shift;
            ;;
        --smt)
            shift
            smt=$1
            shift
            ;;
        --period)
            shift
            period=$1
            shift
            ;;
        --no-load-balance)
            shift;
            no_load_balance=$1
            shift;
            ;;
        --warm-up)
           shift;
           warm_up=" --warm-up $1"
           shift;
           ;;
        --thread)
           shift;
           thread="-$1"
           shift;
           ;;
        --dma-latency)
           shift;
           dma_latency="--dma-latency $1"
           shift;
           ;;
        --deepest-idle-state)
           shift;
           deepest_idle_state="--deepest-idle-state $1"
           shift;
           ;;
        --)
            shift;
            break
            ;;
        *)
            echo "Invalid option: $1"
            exit 1
    esac
done

if [ -z "${WORKLOAD_CPUS}" ] && [ -z "${cpus}" ]; then
    exit_error "Unable to auto-detect WORKLOAD_CPUS and the param 'cpus' is not specified."
fi

if [ -z "${HK_CPUS}"  ] && [ -z "${house_keeping}" ]; then
    exit_error "Unable to auto-detect HK_CPUS and the param 'house-keeping' is not specified."
fi

# Override WORKLOAD_CPUS w/ cpus param (if defined)
if [ -n "${cpus}" ]; then
    echo "'cpus' param is defined: ${cpus}"
    # Cpu range to comma separated list: e.g. 1-5,10-12 ==> 1,2,3,4,5,10,11,12
    cmd="${TOOLBOX_HOME}/bin/cpumask.py --cpus ${cpus}"
    echo "about to run: ${cmd}"
    CMD_OUTPUT=$(${cmd})
    echo -e "${CMD_OUTPUT}"
    WORKLOAD_CPUS=$(echo -e "${CMD_OUTPUT}" | grep cpulist | awk -F= '{print $2}')
    echo "WORKLOAD_CPUS: ${WORKLOAD_CPUS}"
else
    # Fallback to auto-detected WORKLOAD_CPUS list
    echo "'cpus' undefined, using the auto-detected workload cpus: $WORKLOAD_CPUS."
fi

# Update WORKLOAD_CPUS smt-wise
cpu_str=""
for cpu in $(echo $WORKLOAD_CPUS | sed -e "s/,/ /g"); do
    cpu_str+=" --cpu $cpu"
done
cmd="${TOOLBOX_HOME}/bin/get-cpus-ordered.py --smt ${smt} ${cpu_str}"
echo "about to run: ${cmd}"
CMD_OUTPUT=$(${cmd})
echo -e "${CMD_OUTPUT}"
WORKLOAD_CPUS=$(echo -e "${CMD_OUTPUT}" | grep "final cpus:" | awk '{ print $3 }')
echo "WORKLOAD_CPUS: ${WORKLOAD_CPUS}"

# Transform the list of comma-separated cpus into range(s) e.g. 1,2,3->1-3
cmd="${TOOLBOX_HOME}/bin/get-cpu-range.py ${WORKLOAD_CPUS}"
echo "about to run: ${cmd}"
CMD_OUTPUT=$(${cmd})
echo -e "${CMD_OUTPUT}"
WORKLOAD_CPUS=${CMD_OUTPUT}
echo "WORKLOAD_CPUS: ${WORKLOAD_CPUS}"

# Override HK_CPUS w/ house-keeping param (if defined)
if [ -n $house_keeping ]; then
    echo "'house-keeping' param is defined: ${house_keeping}"
    # Cpu range to comma separated list: e.g. 2-3 ==> 2,3
    cmd="${TOOLBOX_HOME}/bin/cpumask.py --cpus ${house_keeping}"
    echo "about to run: ${cmd}"
    CMD_OUTPUT=$(${cmd})
    echo -e "${CMD_OUTPUT}"
    HK_CPUS=$(echo -e "${CMD_OUTPUT}" | grep cpulist | awk -F= '{print $2}')
    echo "HK_CPUS: ${HK_CPUS}"
else
    # fallback to auto-detected HK_CPUS
    echo "'house-keeping' undefined, using the auto-detected house-keeping: $HK_CPUS."
fi

# Update HK_CPUS smt-wise
cpu_str=""
for cpu in $(echo $HK_CPUS | sed -e "s/,/ /g"); do
    if [[ ",$WORKLOAD_CPUS," =~ ",$cpu," ]]; then
        exit_error "House-keeping must NOT overlap with the workload cpus."
    fi
    cpu_str+=" --cpu $cpu"
done
cmd="${TOOLBOX_HOME}/bin/get-cpus-ordered.py --smt ${smt} ${cpu_str}"
echo "about to run: ${cmd}"
CMD_OUTPUT=$(${cmd})
echo -e "${CMD_OUTPUT}"
HK_CPUS=$(echo -e "${CMD_OUTPUT}" | grep "final cpus:" | awk '{ print $3 }')
echo "HK_CPUS: ${HK_CPUS}"

# Transform the list of comma-separated cpus into range(s) e.g. 1,2,3->1-3
cmd="${TOOLBOX_HOME}/bin/get-cpu-range.py ${HK_CPUS}"
echo "about to run: ${cmd}"
CMD_OUTPUT=$(${cmd})
echo -e "${CMD_OUTPUT}"
HK_CPUS=${CMD_OUTPUT}
echo "HK_CPUS: ${HK_CPUS}"

if [ "$no_load_balance" == "1" ]; then
     disable_balance $cpus_list
fi

echo
cmd="rtla timerlat --help"
echo "About to run: $cmd"
$cmd
echo
cmd="rtla timerlat --version"
echo "About to run: $cmd"
$cmd
echo

output=$(validate_clocksource)
if [ $? != 0 ]; then
    exit_error "${output}"
fi

cmd="taskset -c ${HK_CPUS},${WORKLOAD_CPUS}
 rtla timerlat top
 --quiet --duration ${duration}s
 --house-keeping ${HK_CPUS} --cpus ${WORKLOAD_CPUS}
 --period ${period}
 ${priority} ${warm_up} ${dma_latency} ${deepest_idle_state}"
echo "About to run: $cmd"
date +%s.%N >begin.txt
$cmd >timerlat-bin-stderrout.txt 2>&1
rc=$?
date +%s.%N >end.txt

output=$(validate_clocksource)
if [ $? != 0 ]; then
    exit_error "${output}"
fi


if [ "$no_load_balance" == "1" ]; then
     enable_balance $cpus_list
fi

if [ $rc -gt 0 ]; then
    exit_error "`cat timerlat-bin-stderrout.txt`"
fi
